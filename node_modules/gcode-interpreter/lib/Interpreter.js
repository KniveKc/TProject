'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint no-continue: 0 */


var _gcodeParser = require('gcode-parser');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var noop = function noop() {};

/**
 * fromPairs([['a', 1], ['b', 2]]);
 * // => { 'a': 1, 'b': 2 }
 */
var fromPairs = function fromPairs(pairs) {
    var index = -1;
    var length = !pairs ? 0 : pairs.length;
    var result = {};

    while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
    }

    return result;
};

var partitionWordsByGroup = function partitionWordsByGroup() {
    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var groups = [];

    for (var i = 0; i < words.length; ++i) {
        var word = words[i];
        var letter = word[0];

        if (letter === 'G' || letter === 'M') {
            groups.push([word]);
            continue;
        }

        if (groups.length > 0) {
            groups[groups.length - 1].push(word);
        } else {
            groups.push([word]);
        }
    }

    return groups;
};

var interpret = function interpret(self, data) {
    var groups = partitionWordsByGroup(data.words);

    for (var i = 0; i < groups.length; ++i) {
        var words = groups[i];
        var word = words[0] || [];
        var letter = word[0];
        var arg = word[1];
        var cmd = letter + arg;
        var args = {};

        if (letter === 'G' || letter === 'M') {
            self.cmd = cmd;
            args = fromPairs(words.slice(1)); // returns an object composed from arrays of property names and values
        } else {
            // Use the same command if the line does not start with Gxx or Mxx.
            // For example:
            // G0 Z0.25
            //  X-0.5 Y0.
            //  Z0.1
            // G01 Z0. F5.
            //  X0.5 Y0. I0. J-0.5
            //  X0. Y-0.5 I-0.5 J0.
            //  X-0.5 Y0. I0. J0.5
            cmd = self.cmd;
            args = fromPairs(words); // returns an object composed from arrays of property names and values.
        }

        if (typeof self.handlers[cmd] === 'function') {
            var func = self.handlers[cmd];
            func(args);
        }

        if (typeof self[cmd] === 'function') {
            var _func = self[cmd].bind(self);
            _func(args);
        }
    }
};

var Interpreter = function () {
    function Interpreter(options) {
        _classCallCheck(this, Interpreter);

        this.cmd = '';
        this.handlers = {};

        options = options || {};
        options.handlers = options.handlers || {};

        this.handlers = options.handlers;
    }

    _createClass(Interpreter, [{
        key: 'loadFromStream',
        value: function loadFromStream(stream) {
            var _this = this;

            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

            var s = (0, _gcodeParser.parseStream)(stream, callback);
            s.on('data', function (data) {
                interpret(_this, data);
            });
            return s;
        }
    }, {
        key: 'loadFromFile',
        value: function loadFromFile(file) {
            var _this2 = this;

            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

            var s = (0, _gcodeParser.parseFile)(file, callback);
            s.on('data', function (data) {
                interpret(_this2, data);
            });
            return s;
        }
    }, {
        key: 'loadFromFileSync',
        value: function loadFromFileSync(file) {
            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

            var list = (0, _gcodeParser.parseFileSync)(file);
            for (var i = 0; i < list.length; ++i) {
                interpret(this, list[i]);
                callback(list[i], i);
            }
            return list;
        }
    }, {
        key: 'loadFromString',
        value: function loadFromString(str) {
            var _this3 = this;

            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

            var s = (0, _gcodeParser.parseString)(str, callback);
            s.on('data', function (data) {
                interpret(_this3, data);
            });
            return s;
        }
    }, {
        key: 'loadFromStringSync',
        value: function loadFromStringSync(str) {
            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

            var list = (0, _gcodeParser.parseStringSync)(str);
            for (var i = 0; i < list.length; ++i) {
                interpret(this, list[i]);
                callback(list[i], i);
            }
            return list;
        }
    }]);

    return Interpreter;
}();

exports.default = Interpreter;